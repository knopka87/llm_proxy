package telegram

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"child-bot/api/internal/ocr"
	"child-bot/api/internal/store"
)

type Router struct {
	Bot        *tgbotapi.BotAPI
	EngManager *ocr.Manager
	ParseRepo  *store.ParseRepo
	HintRepo   *store.HintRepo

	// Defaults / display models
	GeminiModel   string
	OpenAIModel   string
	DeepseekModel string
}

func (r *Router) HandleCommand(upd tgbotapi.Update) {
	cid := upd.Message.Chat.ID
	switch upd.Message.Command() {
	case "start":
		r.send(cid, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ ‚Äî –≤–µ—Ä–Ω—É —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Å–∫–∞–∂—É, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.\n–ö–æ–º–∞–Ω–¥—ã: /health, /engine")
	case "health":
		r.send(cid, "‚úÖ OK")
	case "engine":
		// –î–æ —Å—é–¥–∞ –æ–±—ã—á–Ω–æ –Ω–µ –¥–æ–π–¥—ë–º ‚Äî /engine –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –≤ HandleUpdate.
		args := strings.Fields(strings.TrimSpace(strings.TrimPrefix(upd.Message.Text, "/engine")))
		if len(args) == 0 {
			cur := r.EngManager.Get(cid).Name()
			r.send(cid, "–¢–µ–∫—É—â–∏–π –¥–≤–∏–∂–æ–∫: "+cur+
				"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/engine yandex\n/engine gemini [model]\n/engine gpt [model]\n/engine deepseek")
			return
		}
		r.send(cid, "–û–∫, –ø–µ—Ä–µ–∫–ª—é—á–∞—é‚Ä¶")
	default:
		r.send(cid, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

func (r *Router) HandleUpdate(upd tgbotapi.Update, engines Engines) {
	// 1) Callback-–∫–Ω–æ–ø–∫–∏
	if upd.CallbackQuery != nil {
		r.handleCallback(*upd.CallbackQuery, engines)
		return
	}

	// 2) –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
	if upd.Message == nil {
		return
	}
	cid := upd.Message.Chat.ID

	// 3) –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∞–≤–∫—É –ø–æ—Å–ª–µ ¬´–ù–µ—Ç¬ª ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ—ë
	if r.hasPendingCorrection(cid) && upd.Message.Text != "" {
		r.applyTextCorrectionThenShowHints(cid, upd.Message.Text, engines)
		return
	}

	// 4) ¬´–ñ—ë—Å—Ç–∫–∏–π¬ª —Ä–µ–∂–∏–º: –µ—Å–ª–∏ –∂–¥—ë–º —Ñ–æ—Ç–æ (—Ä–µ—à–µ–Ω–∏–µ/–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞) –∏ –ø—Ä–∏—à—ë–ª –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¢–ï–ö–°–¢ ‚Äî –º—è–≥–∫–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
	// –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–µ—à–∞–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –¥–≤–∏–∂–∫–∏/–ø—Ä–æ–≤–µ—Ä—è—Ç—å health.
	if upd.Message.Text != "" && !upd.Message.IsCommand() {
		switch getMode(cid) {
		case "await_solution":
			r.send(cid, "–Ø –∂–¥—É —Ñ–æ—Ç–æ —Å –≤–∞—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
			return
		case "await_new_task":
			r.send(cid, "–Ø –∂–¥—É —Ñ–æ—Ç–æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
			return
		}
	}

	// 5) –í–µ—Ç–≤—å –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏ multiple tasks (–æ–∂–∏–¥–∞–µ–º —á–∏—Å–ª–æ 1..N)
	if v, ok := pendingChoice.Load(cid); ok && upd.Message.Text != "" {
		briefs := v.([]string)
		if n, err := strconv.Atoi(strings.TrimSpace(upd.Message.Text)); err == nil && n >= 1 && n <= len(briefs) {
			if ctxv, ok2 := pendingCtx.Load(cid); ok2 {
				pendingChoice.Delete(cid)
				pendingCtx.Delete(cid)
				sc := ctxv.(*selectionContext)
				r.send(cid, fmt.Sprintf("–û–∫, –±–µ—Ä—É –∑–∞–¥–∞–Ω–∏–µ: %s ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é.", briefs[n-1]))
				r.runParseAndMaybeConfirm(context.Background(), cid, sc, engines, n-1, briefs[n-1])
				return
			}
			pendingChoice.Delete(cid)
			r.send(cid, "–ù–µ –Ω–∞—à—ë–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.")
			return
		}
		// –∏–Ω–∞—á–µ –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
	}

	// 6) –ö–æ–º–∞–Ω–¥—ã (–≤ —Ç.—á. /engine)
	if upd.Message.IsCommand() && strings.HasPrefix(upd.Message.Text, "/engine") {
		r.handleEngineCommand(cid, upd.Message.Text, engines)
		return
	}
	if upd.Message.IsCommand() {
		r.HandleCommand(upd)
		return
	}

	// 7) –§–æ—Ç–æ/–∞–ª—å–±–æ–º ‚Äî —ç—Ç–æ —Å–Ω–∏–º–∞–µ—Ç ¬´—Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ¬ª
	if len(upd.Message.Photo) > 0 {
		clearMode(cid) // –ø–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
		r.acceptPhoto(*upd.Message, engines)
		return
	}

	// 8) –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
}

func (r *Router) send(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, _ = r.Bot.Send(msg)
}

func (r *Router) SendResult(chatID int64, text string) {
	if len(text) > 3900 {
		text = text[:3900] + "‚Ä¶"
	}
	r.send(chatID, "üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"+text)
}

func (r *Router) SendError(chatID int64, err error) {
	r.send(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ OCR: %v", err))
}

// handleEngineCommand –ø–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É /engine –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –¥–≤–∏–∂–æ–∫ –¥–ª—è —á–∞—Ç–∞.
// –§–æ—Ä–º–∞—Ç—ã:
//
//	/engine yandex
//	/engine gemini [model]
//	/engine gpt [model]
//	/engine deepseek
func (r *Router) handleEngineCommand(chatID int64, cmd string, engines Engines) {
	args := strings.Fields(strings.TrimSpace(strings.TrimPrefix(cmd, "/engine")))
	if len(args) == 0 {
		r.send(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /engine {yandex|gemini|gpt|deepseek} [model]")
		return
	}
	name := strings.ToLower(args[0])
	var modelArg string
	if len(args) > 1 {
		modelArg = strings.TrimSpace(args[1])
	}

	// –ù–µ–∫–æ—Ç–æ—Ä—ã–º –¥–≤–∏–∂–∫–∞–º –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å ¬´–Ω–∞ –ª–µ—Ç—É¬ª
	type modelSetter interface{ SetModel(string) }

	switch name {
	case "yandex":
		// OCR-—Ç–æ–ª—å–∫–æ; –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω LLM (gemini/gpt) –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
		r.EngManager.Set(chatID, engines.Yandex)
		r.send(chatID, "‚úÖ –î–≤–∏–∂–æ–∫: yandex (OCR). –ü–æ–¥—Å–∫–∞–∑–∫–∏ –±—É–¥—É—Ç —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π LLM –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

	case "gemini":
		eng := engines.Gemini
		if eng == nil {
			r.send(chatID, "‚ùå Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
			return
		}
		// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –¥–≤–∏–∂–æ–∫ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
		if modelArg != "" {
			if ms, ok := any(eng).(modelSetter); ok {
				ms.SetModel(modelArg)
			}
		}
		r.EngManager.Set(chatID, eng)

		r.send(chatID, "‚úÖ –î–≤–∏–∂–æ–∫: gemini ("+eng.GetModel()+").")

	case "gpt", "openai":
		eng := engines.OpenAI
		if eng == nil {
			r.send(chatID, "‚ùå OpenAI GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
			return
		}
		if modelArg != "" {
			if ms, ok := any(eng).(modelSetter); ok {
				ms.SetModel(modelArg)
			}
		}
		r.EngManager.Set(chatID, eng)

		r.send(chatID, "‚úÖ –î–≤–∏–∂–æ–∫: gpt ("+eng.GetModel()+").")

	case "deepseek":
		r.EngManager.Set(chatID, engines.Deepseek)
		r.send(chatID, "‚ö†Ô∏è DeepSeek –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /engine gemini –∏–ª–∏ /engine gpt.")

	default:
		r.send(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã: yandex | gemini | gpt | deepseek")
	}
}

// –ü–æ–∫–∞–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
func (r *Router) askParseConfirmation(chatID int64, pr ocr.ParseResult) {
	var b strings.Builder
	b.WriteString("–Ø —Ç–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–ª –∑–∞–¥–∞–Ω–∏–µ. –í—Å—ë –≤–µ—Ä–Ω–æ?\n")
	if s := strings.TrimSpace(pr.RawText); s != "" {
		b.WriteString("```\n")
		b.WriteString(s)
		b.WriteString("\n```\n")
	}
	if q := strings.TrimSpace(pr.Question); q != "" {
		b.WriteString("\n–í–æ–ø—Ä–æ—Å: ")
		b.WriteString(esc(q))
		b.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(chatID, b.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = makeParseConfirmKeyboard()
	_, _ = r.Bot.Send(msg)
}

// PhotoAcceptedText ‚Äî –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ/–ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–ª—å–±–æ–º–∞.
func (r *Router) PhotoAcceptedText() string {
	return "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –ø–æ–¥—Ä—è–¥, —è —Å–∫–ª–µ—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."
}
