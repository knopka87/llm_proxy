package telegram

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"child-bot/api/internal/ocr"
	"child-bot/api/internal/ocr/deepseek"
	"child-bot/api/internal/ocr/gemini"
	"child-bot/api/internal/ocr/openai"
	"child-bot/api/internal/ocr/yandex"
)

type Engines struct {
	Yandex   *yandex.Engine
	Gemini   *gemini.Engine
	OpenAI   *openai.Engine
	Deepseek *deepseek.Engine
}

func (r *Router) HandleUpdate(upd tgbotapi.Update, engines Engines) {
	if upd.Message == nil {
		return
	}
	cid := upd.Message.Chat.ID

	if upd.Message.IsCommand() {
		if strings.HasPrefix(upd.Message.Text, "/engine") {
			// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞
			args := strings.Fields(strings.TrimSpace(strings.TrimPrefix(upd.Message.Text, "/engine")))
			if len(args) == 0 {
				r.HandleCommand(upd)
				return
			}
			name := strings.ToLower(args[0])
			var mdl string
			if len(args) > 1 {
				mdl = args[1]
			}
			switch name {
			case "yandex":
				r.EngManager.Set(cid, engines.Yandex)
			case "gemini":
				if mdl != "" {
					engines.Gemini.Model = mdl
				}
				r.EngManager.Set(cid, engines.Gemini)
			case "gpt":
				if mdl != "" {
					engines.OpenAI.Model = mdl
				}
				r.EngManager.Set(cid, engines.OpenAI)
			case "deepseek":
				if mdl != "" {
					engines.Deepseek.Model = mdl
				}
				r.EngManager.Set(cid, engines.Deepseek)
				r.send(cid, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: DeepSeek Chat API –Ω–µ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏. –î–ª—è OCR –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /engine yandex | gemini | gpt.")
			default:
				r.send(cid, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫")
				return
			}
			r.send(cid, fmt.Sprintf("‚úÖ –î–≤–∏–∂–æ–∫: %s", name))
			return
		}
		// –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
		r.HandleCommand(upd)
		return
	}

	// –§–æ—Ç–æ
	if len(upd.Message.Photo) > 0 {
		r.send(cid, r.PhotoAcceptedText())
		// –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
		ph := upd.Message.Photo[len(upd.Message.Photo)-1]
		file, err := r.Bot.GetFile(tgbotapi.FileConfig{FileID: ph.FileID})
		if err != nil {
			r.SendError(cid, err)
			return
		}
		url := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", r.Bot.Token, file.FilePath)
		img, err := download(url)
		if err != nil {
			r.SendError(cid, err)
			return
		}

		eng := r.EngManager.Get(cid)
		res, err := eng.Analyze(context.Background(), img, ocr.Options{
			Langs: []string{"ru", "en"},
			// Model: –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ /engine <name> <model>
		})
		if err != nil {
			r.SendError(cid, err)
			return
		}
		switch eng.Name() {
		case "yandex":
			// –¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
			txt := strings.TrimSpace(res.Text)
			if txt == "" {
				txt = "(–ø—É—Å—Ç–æ)"
			}
			r.SendResult(cid, txt)
		default:
			// –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
			var b strings.Builder
			if strings.TrimSpace(res.Text) != "" {
				b.WriteString("üìÑ *–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:*\n")
				b.WriteString("```\n")
				b.WriteString(res.Text)
				b.WriteString("\n```\n\n")
			}
			if res.FoundSolution {
				switch res.SolutionVerdict {
				case "correct":
					b.WriteString("‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ.\n\n")
				case "incorrect":
					b.WriteString("‚ö†Ô∏è –í —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞.\n")
					if strings.TrimSpace(res.SolutionNote) != "" {
						b.WriteString("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –≥–¥–µ/–∫–∞–∫–æ–≥–æ —Ä–æ–¥–∞: ")
						b.WriteString(res.SolutionNote)
						b.WriteString("\n\n")
					} else {
						b.WriteString("\n")
					}
				default:
					b.WriteString("‚ÑπÔ∏è –†–µ—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–∞.\n\n")
				}
			} else {
				b.WriteString("‚ÑπÔ∏è –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n\n")
			}
			if len(res.Hints) > 0 {
				b.WriteString("üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏ (L1‚ÜíL3):*\n")
				for i, h := range res.Hints {
					fmt.Fprintf(&b, "%d) %s\n", i+1, h)
				}
			}

			msg := tgbotapi.NewMessage(cid, b.String())
			msg.ParseMode = "Markdown"
			_, _ = r.Bot.Send(msg)
		}
	}
}

func download(url string) ([]byte, error) {
	resp, err := httpClient().Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("status %d", resp.StatusCode)
	}
	return io.ReadAll(resp.Body)
}

func httpClient() *http.Client {
	return &http.Client{Timeout: 60 * 1e9}
}
