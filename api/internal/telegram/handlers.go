package telegram

import (
	"bytes"
	"context"
	"fmt"
	"image"
	"image/color"
	"image/draw"
	"image/jpeg"
	"image/png"
	"io"
	"math"
	"net/http"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"child-bot/api/internal/ocr"
	"child-bot/api/internal/ocr/deepseek"
	"child-bot/api/internal/ocr/gemini"
	"child-bot/api/internal/ocr/openai"
	"child-bot/api/internal/ocr/yandex"
	"child-bot/api/internal/util"
)

// Engines ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–æ–≤ –∏–Ω–∂–µ–∫—Ç—è—Ç—Å—è –∏–∑ main.go
type Engines struct {
	Yandex   *yandex.Engine
	Gemini   *gemini.Engine
	OpenAI   *openai.Engine
	Deepseek *deepseek.Engine
}

// ====== Aggregation of multiple photos ======

const debounce = 1200 * time.Millisecond
const maxPixels = 18000000 // –Ω–∏–∂–µ –ª–∏–º–∏—Ç–∞ 20–ú–ø –¥–ª—è –∑–∞–ø–∞—Å–∞

type photoBatch struct {
	ChatID       int64
	Key          string // "grp:<mediaGroupID>" | "chat:<chatID>"
	MediaGroupID string

	mu     sync.Mutex
	images [][]byte
	timer  *time.Timer
	lastAt time.Time
}

var batches sync.Map       // key string -> *photoBatch
var pendingChoice sync.Map // chatID -> []string (tasks brief)

// HandleUpdate ‚Äî –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–¥–µ–π—Ç–æ–≤
func (r *Router) HandleUpdate(upd tgbotapi.Update, engines Engines) {
	if upd.Message == nil {
		return
	}
	cid := upd.Message.Chat.ID

	// ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞, –∫–æ–≥–¥–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π ======
	if v, ok := pendingChoice.Load(cid); ok && upd.Message.Text != "" {
		briefs := v.([]string)
		txt := strings.TrimSpace(upd.Message.Text)
		if n, err := strconv.Atoi(txt); err == nil && n >= 1 && n <= len(briefs) {
			pendingChoice.Delete(cid)
			r.send(cid, fmt.Sprintf("–û–∫, –±–µ—Ä—É –∑–∞–¥–∞–Ω–∏–µ: %s\n–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", briefs[n-1]))
			return
		}
		// –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
	}

	// ====== –ö–æ–º–∞–Ω–¥—ã ======
	if upd.Message.IsCommand() {
		if strings.HasPrefix(upd.Message.Text, "/engine") {
			// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞
			args := strings.Fields(strings.TrimSpace(strings.TrimPrefix(upd.Message.Text, "/engine")))
			if len(args) == 0 {
				r.HandleCommand(upd)
				return
			}
			name := strings.ToLower(args[0])
			var mdl string
			if len(args) > 1 {
				mdl = args[1]
			}
			switch name {
			case "yandex":
				r.EngManager.Set(cid, engines.Yandex)
				r.send(cid, "‚úÖ –î–≤–∏–∂–æ–∫: yandex (OCR)")
			case "gemini":
				if mdl != "" {
					engines.Gemini.Model = mdl
				}
				r.EngManager.Set(cid, engines.Gemini)
				r.send(cid, "‚úÖ –î–≤–∏–∂–æ–∫: gemini ("+engines.Gemini.Model+")")
			case "gpt":
				if mdl != "" {
					engines.OpenAI.Model = mdl
				}
				r.EngManager.Set(cid, engines.OpenAI)
				r.send(cid, "‚úÖ –î–≤–∏–∂–æ–∫: gpt ("+engines.OpenAI.Model+")")
			case "deepseek":
				if mdl != "" {
					engines.Deepseek.Model = mdl
				}
				r.EngManager.Set(cid, engines.Deepseek)
				r.send(cid, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: DeepSeek Chat API –Ω–µ —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /engine yandex | gemini | gpt.")
			default:
				r.send(cid, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã: yandex | gemini | gpt | deepseek")
			}
			return
		}
		// –ø—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Router.HandleCommand
		r.HandleCommand(upd)
		return
	}

	// ====== –§–û–¢–û (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –∏ —Å–µ—Ä–∏–∏ —Ñ–æ—Ç–æ) ======
	if len(upd.Message.Photo) > 0 {
		// –°–∫–∞—á–∏–≤–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
		ph := upd.Message.Photo[len(upd.Message.Photo)-1]
		file, err := r.Bot.GetFile(tgbotapi.FileConfig{FileID: ph.FileID})
		if err != nil {
			r.SendError(cid, err)
			return
		}
		url := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", r.Bot.Token, file.FilePath)
		imgBytes, err := download(url)
		if err != nil {
			r.SendError(cid, err)
			return
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –ø–∞—á–∫–∏: –∞–ª—å–±–æ–º (media_group) –∏–ª–∏ —Å–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç—É
		key := ""
		if upd.Message.MediaGroupID != "" {
			key = "grp:" + upd.Message.MediaGroupID
		} else {
			key = fmt.Sprintf("chat:%d", cid)
		}

		// –ë–µ—Ä—ë–º/—Å–æ–∑–¥–∞—ë–º –ø–∞—á–∫—É
		bi, _ := batches.LoadOrStore(key, &photoBatch{
			ChatID:       cid,
			Key:          key,
			MediaGroupID: upd.Message.MediaGroupID,
			images:       make([][]byte, 0, 4),
		})
		b := bi.(*photoBatch)

		// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
		b.mu.Lock()
		b.images = append(b.images, imgBytes)
		b.lastAt = time.Now()
		if b.timer != nil {
			b.timer.Stop()
		}
		b.timer = time.AfterFunc(debounce, func() {
			r.processBatch(key, engines)
		})
		b.mu.Unlock()

		// –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –Ω–∞ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
		if len(b.images) == 1 {
			r.send(cid, r.PhotoAcceptedText())
		}
	}
}

// processBatch –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—á–∫—É, —Å–∫–ª–µ–∏–≤–∞–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä, –∑–∞—Ç–µ–º ‚Äî –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
func (r *Router) processBatch(key string, engines Engines) {
	bi, ok := batches.Load(key)
	if !ok {
		return
	}
	b := bi.(*photoBatch)

	// –ö–æ–ø–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø–∞—á–∫—É
	b.mu.Lock()
	images := make([][]byte, len(b.images))
	copy(images, b.images)
	chatID := b.ChatID
	batches.Delete(key)
	b.mu.Unlock()

	if len(images) == 0 {
		return
	}

	// –°–∫–ª–µ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
	merged, err := combineAsOne(images)
	if err != nil {
		r.SendError(chatID, fmt.Errorf("—Å–∫–ª–µ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %w", err))
		return
	}

	// --- DETECT stage (PROMPT_DETECT) ---
	mime := util.SniffMimeHTTP(merged)
	var dres ocr.DetectResult
	var derr error

	// –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä Gemini, –∏–Ω–∞—á–µ OpenAI; –µ—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
	if engines.Gemini != nil && engines.Gemini.APIKey != "" {
		dres, derr = engines.Gemini.Detect(context.Background(), merged, mime, 0)
	} else if engines.OpenAI != nil && engines.OpenAI.APIKey != "" {
		dres, derr = engines.OpenAI.Detect(context.Background(), merged, mime, 0)
	}
	if derr != nil {
		// –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
		r.send(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å–Ω–∏–º–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.")
	} else {
		// –ü–æ–ª–∏—Ç–∏–∫–∞ –∏–∑ PROMPT_DETECT
		if dres.FinalState == "inappropriate_image" {
			r.send(chatID, "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
			return
		}
		if dres.NeedsRescan {
			msg := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–Ω–∏–º–∏—Ç–µ —Ñ–æ—Ç–æ"
			if dres.RescanReason != "" {
				msg += ": " + dres.RescanReason
			}
			r.send(chatID, "üì∑ "+msg)
			return
		}
		if dres.HasFaces {
			r.send(chatID, "‚ÑπÔ∏è –ù–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω—ã –ª–∏—Ü–∞. –õ—É—á—à–µ –ø–µ—Ä–µ—Å–Ω—è—Ç—å –±–µ–∑ –ª–∏—Ü, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.")
		}
		if dres.MultipleTasksDetected {
			// –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–π –ª–∏–¥–µ—Ä –∏ –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏
			if dres.AutoChoiceSuggested && dres.TopCandidateIndex != nil &&
				*dres.TopCandidateIndex >= 0 && *dres.TopCandidateIndex < len(dres.TasksBrief) &&
				dres.Confidence >= 0.80 {
				// –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π
			} else {
				// –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
				if len(dres.TasksBrief) > 0 {
					pendingChoice.Store(chatID, dres.TasksBrief)
					var bld strings.Builder
					bld.WriteString("–ù–∞—à—ë–ª –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π. –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä:\n")
					for i, t := range dres.TasksBrief {
						fmt.Fprintf(&bld, "%d) %s\n", i+1, t)
					}
					if dres.DisambiguationQuestion != "" {
						bld.WriteString("\n")
						bld.WriteString(dres.DisambiguationQuestion)
					}
					r.send(chatID, bld.String())
					return
				}
			}
		}
	}

	eng := r.EngManager.Get(chatID)

	if eng.Name() == "gemini" || eng.Name() == "gpt" {
		pr, pErr := eng.Parse(context.Background(), merged, 0)
		if pErr == nil {
			// –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞
			if pr.ConfirmationNeeded {
				var b strings.Builder
				b.WriteString("–Ø —Ç–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–ª –∑–∞–¥–∞–Ω–∏–µ. –í—Å—ë –≤–µ—Ä–Ω–æ?\n")
				if strings.TrimSpace(pr.RawText) != "" {
					b.WriteString("```\n")
					b.WriteString(pr.RawText)
					b.WriteString("\n```\n")
				}
				if strings.TrimSpace(pr.Question) != "" {
					b.WriteString("\n–í–æ–ø—Ä–æ—Å: ")
					b.WriteString(pr.Question)
					b.WriteString("\n")
				}
				b.WriteString("\n–û—Ç–≤–µ—Ç—å—Ç–µ: –¥–∞ / –Ω–µ—Ç")
				r.send(chatID, b.String())

				// —Ç—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å pr –≤ pending map, —á—Ç–æ–±—ã –Ω–∞ "–¥–∞" –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
				// (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
				// parsePending.Store(chatID, pr)
				// return
			}
			// –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ Analyze
		} else {
			r.send(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —á—ë—Ç–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞—é –∞–Ω–∞–ª–∏–∑.")
		}
	}

	// --- –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–≤–∏–∂–∫–æ–º ---
	res, err := eng.Analyze(context.Background(), merged, ocr.Options{
		Langs: []string{"ru", "en"},
	})
	if err != nil {
		r.SendError(chatID, err)
		return
	}

	switch eng.Name() {
	case "yandex":
		// –¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (OCR)
		txt := strings.TrimSpace(res.Text)
		if txt == "" {
			txt = "(–ø—É—Å—Ç–æ)"
		}
		r.SendResult(chatID, txt)
	default:
		// –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ / –≤–µ—Ä–¥–∏–∫—Ç / 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏)
		var bld strings.Builder
		if strings.TrimSpace(res.Text) != "" {
			bld.WriteString("üìÑ *–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:*\n```\n")
			bld.WriteString(res.Text)
			bld.WriteString("\n```\n\n")
		}
		if res.FoundSolution {
			switch res.SolutionVerdict {
			case "correct":
				bld.WriteString("‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –≤–µ—Ä–Ω–æ.\n\n")
			case "incorrect":
				bld.WriteString("‚ö†Ô∏è –í —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞.\n")
				if strings.TrimSpace(res.SolutionNote) != "" {
					bld.WriteString("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –≥–¥–µ/–∫–∞–∫–æ–≥–æ —Ä–æ–¥–∞: ")
					bld.WriteString(res.SolutionNote)
					bld.WriteString("\n\n")
				} else {
					bld.WriteString("\n")
				}
			default:
				bld.WriteString("‚ÑπÔ∏è –†–µ—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–∞.\n\n")
			}
		} else {
			bld.WriteString("‚ÑπÔ∏è –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n\n")
		}
		if len(res.Hints) > 0 {
			bld.WriteString("üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏ (L1‚ÜíL3):*\n")
			for i, h := range res.Hints {
				fmt.Fprintf(&bld, "%d) %s\n", i+1, h)
			}
		}
		msg := tgbotapi.NewMessage(chatID, bld.String())
		msg.ParseMode = "Markdown"
		_, _ = r.Bot.Send(msg)
	}
}

// ====== Utilities ======

func download(url string) ([]byte, error) {
	resp, err := httpClient().Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		b, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("status %d: %s", resp.StatusCode, string(b))
	}
	return io.ReadAll(resp.Body)
}

func httpClient() *http.Client {
	return &http.Client{Timeout: 60 * time.Second}
}

// combineAsOne –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –æ–¥–Ω—É (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ).
// –†–∞–∑–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ.
// –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ –ø–∏–∫—Å–µ–ª—è–º > maxPixels ‚Äî –¥–µ–ª–∞–µ–º downscale.
func combineAsOne(images [][]byte) ([]byte, error) {
	decoded := make([]image.Image, 0, len(images))
	widths := make([]int, 0, len(images))
	heights := make([]int, 0, len(images))

	for _, b := range images {
		img, _, err := image.Decode(bytes.NewReader(b))
		if err != nil {
			// –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –Ω–∞–ø—Ä—è–º—É—é
			if try, err2 := tryDecodeStrict(b); err2 == nil {
				img = try
			} else {
				return nil, err
			}
		}
		decoded = append(decoded, img)
		bounds := img.Bounds()
		widths = append(widths, bounds.Dx())
		heights = append(heights, bounds.Dy())
	}

	// –≤—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
	maxW := 0
	sumH := 0
	for i := range decoded {
		if widths[i] > maxW {
			maxW = widths[i]
		}
		sumH += heights[i]
	}
	if maxW == 0 || sumH == 0 {
		return nil, fmt.Errorf("–ø—É—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
	}

	dst := image.NewRGBA(image.Rect(0, 0, maxW, sumH))
	// —Ñ–æ–Ω ‚Äî –±–µ–ª—ã–π
	draw.Draw(dst, dst.Bounds(), &image.Uniform{C: color.White}, image.Point{}, draw.Src)

	// —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ –æ—á–µ—Ä–µ–¥–∏, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
	y := 0
	for i, img := range decoded {
		w := widths[i]
		h := heights[i]
		x := (maxW - w) / 2
		rect := image.Rect(x, y, x+w, y+h)
		draw.Draw(dst, rect, img, img.Bounds().Min, draw.Over)
		y += h
	}

	// downscale –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–∏–∫—Å–µ–ª–µ–π
	totalPx := maxW * sumH
	final := image.Image(dst)
	if totalPx > maxPixels {
		scale := math.Sqrt(float64(maxPixels) / float64(totalPx))
		newW := int(float64(maxW)*scale + 0.5)
		newH := int(float64(sumH)*scale + 0.5)
		if newW < 1 {
			newW = 1
		}
		if newH < 1 {
			newH = 1
		}
		final = scaleDownNN(dst, newW, newH)
	}

	// –ö–æ–¥–∏—Ä—É–µ–º –≤ JPEG (–∫–∞—á–µ—Å—Ç–≤–æ 90)
	var out bytes.Buffer
	if err := jpeg.Encode(&out, final, &jpeg.Options{Quality: 90}); err != nil {
		return nil, err
	}
	return out.Bytes(), nil
}

// tryDecodeStrict ‚Äî –ø—Ä–æ–±—É–µ–º —Å—Ç—Ä–æ–≥–æ PNG/JPEG, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Decode
func tryDecodeStrict(b []byte) (image.Image, error) {
	if len(b) >= 2 && b[0] == 0xFF && b[1] == 0xD8 {
		return jpeg.Decode(bytes.NewReader(b))
	}
	if len(b) >= 8 &&
		b[0] == 0x89 && b[1] == 0x50 && b[2] == 0x4E && b[3] == 0x47 &&
		b[4] == 0x0D && b[5] == 0x0A && b[6] == 0x1A && b[7] == 0x0A {
		return png.Decode(bytes.NewReader(b))
	}
	// –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî std Decode –µ—â—ë —Ä–∞–∑
	img, _, err := image.Decode(bytes.NewReader(b))
	return img, err
}

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π nearest-neighbor –¥–∞—É–Ω—Å–∫–µ–π–ª (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
func scaleDownNN(src image.Image, newW, newH int) *image.RGBA {
	dst := image.NewRGBA(image.Rect(0, 0, newW, newH))
	sb := src.Bounds()
	srcW := sb.Dx()
	srcH := sb.Dy()
	for y := 0; y < newH; y++ {
		sy := sb.Min.Y + (y*srcH)/newH
		for x := 0; x < newW; x++ {
			sx := sb.Min.X + (x*srcW)/newW
			dst.Set(x, y, src.At(sx, sy))
		}
	}
	return dst
}
