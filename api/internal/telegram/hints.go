package telegram

import (
	"context"
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"child-bot/api/internal/ocr"
	"child-bot/api/internal/util"
)

type hintSession struct {
	Image        []byte
	Mime         string
	MediaGroupID string
	Parse        ocr.ParseResult
	Detect       ocr.DetectResult
	EngineName   string
	Model        string
	NextLevel    int
}

func (r *Router) showTaskAndPrepareHints(chatID int64, sc *selectionContext, pr ocr.ParseResult, llm ocr.Engine) {
	var b strings.Builder
	b.WriteString("üìÑ *–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:*\n```\n")
	if strings.TrimSpace(pr.RawText) != "" {
		b.WriteString(pr.RawText)
	} else {
		b.WriteString("(–Ω–µ —É–¥–∞–ª–æ—Å—å —á—ë—Ç–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç)")
	}
	b.WriteString("\n```\n")
	if q := strings.TrimSpace(pr.Question); q != "" {
		b.WriteString("\n*–í–æ–ø—Ä–æ—Å:* " + q + "\n")
	}

	msg := tgbotapi.NewMessage(chatID, b.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = makeHintKeyboard()
	_, _ = r.Bot.Send(msg)

	hs := &hintSession{
		Image: sc.Image, Mime: sc.Mime, MediaGroupID: sc.MediaGroupID,
		Parse: pr, Detect: sc.Detect, EngineName: llm.Name(), Model: llm.GetModel(), NextLevel: 1,
	}
	hintState.Store(chatID, hs)
}

func (r *Router) applyTextCorrectionThenShowHints(chatID int64, corrected string, engines Engines) {
	v, ok := parseWait.Load(chatID)
	if !ok {
		return
	}
	p := v.(*parsePending)
	parseWait.Delete(chatID)

	llm := r.resolveEngineByName(p.LLM, engines)
	if llm == nil {
		r.send(chatID, "LLM-–¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
		return
	}
	imgHash := util.SHA256Hex(p.Sc.Image)

	pr := p.PR
	pr.RawText = corrected
	pr.ConfirmationNeeded = false
	pr.ConfirmationReason = "user_fix"

	_ = r.ParseRepo.Upsert(context.Background(), chatID, p.Sc.MediaGroupID, imgHash, llm.Name(), llm.GetModel(), pr, true, "user_fix")
	r.showTaskAndPrepareHints(chatID, &selectionContext{
		Image: p.Sc.Image, Mime: p.Sc.Mime, MediaGroupID: p.Sc.MediaGroupID, Detect: p.Sc.Detect,
	}, pr, llm)
}

func formatHint(level int, hr ocr.HintResult) string {
	var b strings.Builder
	fmt.Fprintf(&b, "üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞ L%d*: %s\n", level, safe(hr.HintTitle))
	for _, s := range hr.HintSteps {
		if t := strings.TrimSpace(s); t != "" {
			fmt.Fprintf(&b, "‚Ä¢ %s\n", safe(t))
		}
	}
	if t := strings.TrimSpace(hr.ControlQuestion); t != "" {
		fmt.Fprintf(&b, "\n*–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è:* %s\n", safe(t))
	}
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
	if hr.RuleHint != "" {
		fmt.Fprintf(&b, "_–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É:_ %s\n", safe(hr.RuleHint))
	}
	msg := tgbotapi.NewMessage(0, "") // –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è ParseMode
	_ = msg                           // –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown, –ø–æ—ç—Ç–æ–º—É —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
	return markdown(b.String())
}

func safe(s string) string {
	// –ª—ë–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç Markdown-–≤—Å—Ç–∞–≤–æ–∫
	s = strings.ReplaceAll(s, "`", "'")
	s = strings.ReplaceAll(s, "_", "\\_")
	s = strings.ReplaceAll(s, "*", "\\*")
	s = strings.ReplaceAll(s, "[", "\\[")
	return s
}

func markdown(s string) string {
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –≤ –º–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—ë–º ParseMode=Markdown –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
	return s
}
